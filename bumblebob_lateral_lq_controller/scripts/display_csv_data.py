import argparse
import csv
import os
import sys
from collections import defaultdict

import matplotlib.pyplot as plt
import numpy as np
from matplotlib import cm
from matplotlib.colors import LinearSegmentedColormap, ListedColormap

"""-------Parse Arguments-------"""
parser = argparse.ArgumentParser(description="Add the path to the data file")
parser.add_argument(
    "data_path", help="Enter the path to your data file generated by the controller node")
parser.add_argument(
    "reference_path", help="Enter the path to your reference raceline file")
args = parser.parse_args()


"""-------Read CSV Files-------"""
columns = defaultdict(list)
with open(filepath) as f:
    reader = csv.reader(f)
    reader.next()
    for row in reader:
        for (i, v) in enumerate(row):
            columns[i].append(v)

columns_race = defaultdict(list)
with open(referencepath) as f:
    reader = csv.reader(f)
    reader.next()
    for row in reader:
        for (i, v) in enumerate(row):
            columns_race[i].append(v)

"""-------Switch Strings to Floats-------"""
x = [float(i) for i in columns[0]]
y = [float(i) for i in columns[1]]
car_heading = [float(i) for i in columns[2]]
road_heading = [float(i) for i in columns[3]]
feedback_angle = [float(i) for i in columns[4]]
feedforward_angle = [float(i) for i in columns[5]]
steering_cmd = [float(i) for i in columns[6]]
radius = [float(i) for i in columns[7]]
lateral_error = [float(i) for i in columns[8]]
heading_error = [float(i) for i in columns[9]]
angular_velocity = [float(i) for i in columns[10]]
steering_rate = [float(i) for i in columns[11]]
raceline_x = [float(i) for i in columns_race[0]]
raceline_y = [-float(i) for i in columns_race[1]]

# calculate mean lateral error
avg_lateral_error = np.mean(abs(np.array(lateral_error)))
print("Average lateral error: ", avg_lateral_error)

timestep = np.linspace(0, len(columns[0]), len(columns[0]))

# color map
viridis = cm.get_cmap('viridis', len(columns[0]))
norm = plt.Normalize(0, len(columns[0]))

"""-------Plot The Data-------"""

plt.figure()
plt.suptitle("q1 = 1, q2 = 0.25 , R = 1, v = 9m/s", fontsize=12)
plt.subplot(321)
plt.scatter(x, y, c=timestep, cmap=viridis, norm=norm, s=3)
# plt.scatter(raceline_y, raceline_x, color="grey", s=0.5)
plt.legend()
plt.ylabel("y in m")
plt.xlabel("x in m")


plt.subplot(322)
plt.scatter(timestep / 5, lateral_error, c=timestep,
            cmap=viridis, norm=norm, s=2)
plt.legend
plt.ylabel("lateral-error in m")
plt.xlabel("timestep")

plt.subplot(323)
plt.scatter(timestep/5, steering_cmd, c=timestep,
            cmap=viridis, norm=norm, s=2)

plt.legend
plt.ylabel("steering cmd in deg")
plt.xlabel("timestep")

plt.subplot(324)
plt.scatter(timestep/5, heading_error, c=timestep,
            cmap=viridis, norm=norm, s=2)
plt.legend
plt.ylabel("heading error in rad")
plt.xlabel("timestep")

plt.subplot(325)
plt.scatter(timestep/5, steering_rate, c=timestep,
            cmap=viridis, norm=norm, s=2)
plt.legend
plt.ylabel("steering rate in deg/s")
plt.xlabel("timestep")


plt.show()
